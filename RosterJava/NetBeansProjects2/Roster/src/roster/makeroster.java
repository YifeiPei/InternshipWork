/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package roster;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import jxl.read.biff.BiffException;

/**
 *
 * @author shahua
 */
public class makeroster extends javax.swing.JFrame {

    /**
     * Creates new form makeroster
     */
    public makeroster() throws IOException, BiffException {
        initComponents();
        av_locations.add("ABERFOYLE PARK");
        av_locations.add("WILLUNGA");
        av_locations.add("WOODCROFT");
        av_locations.add("NOARLUNGA");
        position_name.add("CC1");
        position_name.add("CC2");
        position_name.add("CC3");
        position_name.add("CC4");
        position_name.add("CC5");
        position_name.add("CC6");
        position_name.add("CC7");
        position_name.add("CC8");
        position_name.add("CC9");
        position_name.add("FC1");
        position_name.add("FC2");
        position_name.add("FC3");
        position_name.add("CCB");
        position_name.add("FC2N");
        position_name.add("FC2CC");
        position_name.add("FC2BU");

        //monday position
        String[] s = new String[2];
        // s[0]=
        // position_list.add(new String[2]{"",""});

        load_special();
        load_staff();
        load_basestaff();
        load_nonbasestaff();
//        load_positions();
        //baseday
        load_days_positions_fc();
        load_days_positions_cc();
        roster_baseday();
        post_results();
        Jexcel excel = new Jexcel();
        excel.run(table);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("testsql:1433;DatabaseName5=rosterPU").createEntityManager();
        nameQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT n FROM Name n");
        nameList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : nameQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(850, 538));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("ok");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(604, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(125, 125, 125))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:

        //test special list
        /*
         for (int i = 0; i < staff.get(0).baseday.position.size(); i++) {
         //jTextArea1.append(staff.get(0).baseday.position.get(i));
         System.out.println(staff.get(0).baseday.position.get(i));
         }
         */
        //write to database
        //creat_roster_table();
        //delete_roster();
        //organise the xml

    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(makeroster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(makeroster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(makeroster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(makeroster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new makeroster().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(makeroster.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BiffException ex) {
                    Logger.getLogger(makeroster.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // load special list
    public void load_special() {
        Connection conn = null;
        try {
//        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // DB d=new DB();
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        //System.out.println("ssssss  ");
        try {
            //conn = DriverManager.getConnection("jdbc:odbc:dbpoolname",  "sa", "123456");  
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            //System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        //ArrayList<Object[]> list = new ArrayList<Object[]>();
        String q = "use roster select name, location, position, day from specialrequire";
        int j = 0;
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(q);
            while (rs.next()) {
                j++;
                String note[] = new String[4]; // number of colum which you want to get
                for (int i = 0; i < note.length; i++) {
                    note[i] = (String) rs.getObject(i + 1);
                    //System.out.println((String)rs.getObject(i+1));
                    //System.out.println(i);
                    note[i] = note[i].trim();
                }
                special.add(note);

            }

            stmt.close();
            conn.close();
            //System.out.println(special.get(0)[3]);
        } catch (Exception e) {
            System.out.println(e);

        }
    }

    public void load_staff() {
        //load all staff names
        Connection conn = null;
        try {
//        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // DB d=new DB();
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        //System.out.println("ssssss  ");
        try {
            //conn = DriverManager.getConnection("jdbc:odbc:dbpoolname",  "sa", "123456");  
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            //System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        //ArrayList<Object[]> list = new ArrayList<Object[]>();
        String q = "use roster select name,location from name";
        int j = 0;
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(q);
            while (rs.next()) {
                j++;
                String note[] = new String[2]; // number of colum which you want to get
                for (int i = 0; i < note.length; i++) {
                    note[i] = (String) rs.getObject(i + 1);
                    note[i] = note[i].trim();
                    //System.out.println(note[i] + "   " + i);
                    //System.out.println(i);
                }
                all_staff_names.add(note[0]);
                all_staff_locations.add(note[1]);
            }

            stmt.close();
            conn.close();
            //System.out.println(special.get(0)[0]);
        } catch (Exception e) {
            System.out.println(e);

        }

        //detail of one staff
        for (int i = 0; i < all_staff_names.size(); i++) {
            av_postion = new ArrayList<ArrayList<String>>();
            name = all_staff_names.get(i); //name
            location = all_staff_locations.get(i); //location
            //workingday
            load_workingdays(name);
            //baseday locations already in workingdays
            //baseday positions
            //for (int k = 0; k < av_locations.size(); k++) {
            load_basepositions(name);

            //}
            //test av_positions for one staff
                /*
             for(int l=0;l<av_postion.size();l++){
             System.out.print(name+"      "+av_locations.get(l)+"      ");
             for(int m=0;m<av_postion.get(l).size();m++){
             System.out.print(av_postion.get(l).get(m)+" ");
             }
             System.out.println();
             }
             */
            baseday = new individual_availble(av_locations, av_postion);

            for (int l = 0; l < baseday.position.size(); l++) {
                System.out.print(name + "      " + baseday.location.get(l) + "      ");
                for (int m = 0; m < baseday.position.get(l).size(); m++) {
                    System.out.print(baseday.position.get(l).get(m) + " ");
                }
                System.out.println();
            }

            av_postion = new ArrayList<ArrayList<String>>();
            load_nonpositions(name);

            nonbaseday = new individual_availble(av_locations, av_postion);
            person = new individual(name, location, workingday, baseday, nonbaseday);
            staff.add(person);
        }

        //test of staff inf
        /*
         for(int i=0;i<staff.size();i++)
         for(int l=0;l<staff.get(i).baseday.position.size();l++){
         System.out.print(staff.get(i).name+"      "+staff.get(i).baseday.location.get(l)+"     ");
         for(int m=0;m<staff.get(i).baseday.position.get(l).size();m++){
         System.out.print(staff.get(i).baseday.position.get(l).get(m)+" ");
         }
         System.out.println();
         }
                
         */
    }

    public void load_basestaff() {
        ArrayList<String[]> workingdays = new ArrayList<String[]>();

        Connection conn = null;
        try {
//        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // DB d=new DB();
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        //System.out.println("ssssss  ");
        try {
            //conn = DriverManager.getConnection("jdbc:odbc:dbpoolname",  "sa", "123456");  
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            //System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        String q = "use roster select mon_w1,tue_w1,wed_w1,thur_w1,fri_w1,mon_w2,tue_w2,wed_w2,thur_w2,fri_w2,mon_w3,tue_w3,wed_w3,thur_w3,fri_w3,mon_w4,tue_w4,wed_w4,thur_w4,fri_w4,name from basicworkingday";
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(q);
            //System.out.println(q);
            while (rs.next()) {

                String note[] = new String[21]; // number of colum which you want to get
                for (int j = 0; j < note.length; j++) {
                    note[j] = (String) rs.getObject(j + 1);
                    //System.out.println(note[j] + "   " + j);
                    //System.out.println(i);
                    note[j] = note[j].trim();
                }
                workingdays.add(note);

            }
            stmt.close();
            conn.close();
            //for(int i=0;i<workingdays.get(0).length;i++)
            //System.out.println(workingdays.get(3)[i]);

        } catch (Exception e) {
            System.out.println(e);
        }
        //System.out.println(workingdays.get(0)[20]);
        ArrayList<String> s;
        for (int i = 0; i < 20; i++) {
            s = new ArrayList<String>();
            for (int j = 0; j < workingdays.size(); j++) {
                if (workingdays.get(j)[i].equals("CC")) {
                    s.add(workingdays.get(j)[20]);
                    //av_basestaff.get(i).add(workingdays.get(j)[20]);
                    // System.out.println(workingdays.get(j)[20]);
                }
            }
            av_basestaff.add(s);
        }
        /* 
         for(int i=0;i<av_basestaff.size();i++){
         for(int j=0;j<av_basestaff.get(i).size();j++)
         System.out.print(av_basestaff.get(i).get(j)+"   ");
         System.out.println();
         }
         */
    }

    public void load_nonbasestaff() {
        ArrayList<String[]> workingdays = new ArrayList<String[]>();

        Connection conn = null;
        try {
//        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // DB d=new DB();
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        //System.out.println("ssssss  ");
        try {
            //conn = DriverManager.getConnection("jdbc:odbc:dbpoolname",  "sa", "123456");  
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            //System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        String q = "use roster select mon_w1,tue_w1,wed_w1,thur_w1,fri_w1,mon_w2,tue_w2,wed_w2,thur_w2,fri_w2,mon_w3,tue_w3,wed_w3,thur_w3,fri_w3,mon_w4,tue_w4,wed_w4,thur_w4,fri_w4,name from basicworkingday";
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(q);
            //System.out.println(q);
            while (rs.next()) {

                String note[] = new String[21]; // number of colum which you want to get
                for (int j = 0; j < note.length; j++) {
                    note[j] = (String) rs.getObject(j + 1);
                    //System.out.println(note[j] + "   " + j);
                    //System.out.println(i);
                    note[j] = note[j].trim();
                }
                workingdays.add(note);

            }
            stmt.close();
            conn.close();
            //for(int i=0;i<workingdays.get(0).length;i++)
            //System.out.println(workingdays.get(3)[i]);

        } catch (Exception e) {
            System.out.println(e);
        }
        //System.out.println(workingdays.get(0)[20]);
        ArrayList<String> s;
        for (int i = 0; i < 20; i++) {
            s = new ArrayList<String>();
            for (int j = 0; j < workingdays.size(); j++) {
                if (workingdays.get(j)[i].equals("null")) {
                    s.add(workingdays.get(j)[20]);
                    //av_basestaff.get(i).add(workingdays.get(j)[20]);
                    // System.out.println(workingdays.get(j)[20]);
                }
            }
            av_nonbasestaff.add(s);

        }
        /*
         for(int i=0;i<av_nonbasestaff.size();i++){
         for(int j=0;j<av_nonbasestaff.get(i).size();j++)
         System.out.print(av_nonbasestaff.get(i).get(j)+"   ");
         System.out.println();
         }
         */
    }

    public void load_workingdays(String name) {
        Connection conn = null;
        try {
//        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // DB d=new DB();
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        //System.out.println("ssssss  ");
        try {
            //conn = DriverManager.getConnection("jdbc:odbc:dbpoolname",  "sa", "123456");  
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            //System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        String q = "use roster select mon_w1,tue_w1,wed_w1,thur_w1,fri_w1,mon_w2,tue_w2,wed_w2,thur_w2,fri_w2,mon_w3,tue_w3,wed_w3,thur_w3,fri_w3,mon_w4,tue_w4,wed_w4,thur_w4,fri_w4 from basicworkingday where name='" + name + "'";
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(q);
            //System.out.println(q);
            while (rs.next()) {

                String note[] = new String[20]; // number of colum which you want to get
                for (int j = 0; j < note.length; j++) {
                    note[j] = (String) rs.getObject(j + 1);
                    //System.out.println(note[j] + "   " + j);
                    //System.out.println(i);
                    note[j] = note[j].trim();
                }
                workingday = note.clone();

            }
            stmt.close();
            conn.close();
            //System.out.println(list.get(0)[0] + "   444");
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public void load_basepositions(String name) {
        String[] q = new String[4];
        Connection conn = null;
        ArrayList<String> position = new ArrayList<String>();
        //can be prove
        q[0] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from baseday_ap where name='" + name + "'";
        q[1] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from baseday_will where name='" + name + "'";
        q[2] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from baseday_wcft where name='" + name + "'";
        q[3] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from baseday_noar where name='" + name + "'";
        for (int i = 0; i < q.length; i++) {
            conn = null;
            position.clear();
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            } catch (java.lang.ClassNotFoundException e) {
                e.printStackTrace();
            }
            try {
                conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            } catch (SQLException e) {
                System.out.println(e);
            }
            int j = 0;
            try {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(q[i]);
                while (rs.next()) {
                    j++;
                    int note[] = new int[16]; // number of colum which you want to get

                    for (int k = 0; k < note.length; k++) {
                        note[k] = (Integer) rs.getObject(k + 1);
                    }
                    for (int l = 0; l < note.length; l++) {
                        if (note[l] == 1) {
                            position.add(position_name.get(l));
                        }
                    }
                }
                ArrayList<String> list = new ArrayList<String>(position);
                av_postion.add(list);
                stmt.close();
                conn.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }

    }

    public void load_nonpositions(String name) {
        String[] q = new String[4];
        Connection conn = null;
        ArrayList<String> position = new ArrayList<String>();
        //can be prove
        q[0] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from nonbaseday_ap where name='" + name + "'";
        q[1] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from nonbaseday_will where name='" + name + "'";
        q[2] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from nonbaseday_wcft where name='" + name + "'";
        q[3] = "use roster select cc1,cc2,cc3,cc4,cc5,cc6,cc7,cc8,cc9,fc1,fc2,fc3,ccb,fc2n,fc2cc,fc2bu from nonbaseday_noar where name='" + name + "'";
        for (int i = 0; i < q.length; i++) {
            conn = null;
            position.clear();
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            } catch (java.lang.ClassNotFoundException e) {
                e.printStackTrace();
            }
            try {
                conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            } catch (SQLException e) {
                System.out.println(e);
            }
            int j = 0;
            try {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(q[i]);
                while (rs.next()) {
                    j++;
                    int note[] = new int[16]; // number of colum which you want to get

                    for (int k = 0; k < note.length; k++) {
                        note[k] = (Integer) rs.getObject(k + 1);
                    }
                    for (int l = 0; l < note.length; l++) {
                        if (note[l] == 1) {
                            position.add(position_name.get(l));
                            //System.out.println(position_name.get(l));
                        }
                    }
                }
                ArrayList<String> list = new ArrayList<String>(position);
                av_postion.add(list);
                //System.out.println(av_postion.get(i).get(0));
                stmt.close();
                conn.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }

    }

    public void load_days_positions_fc() {
        ArrayList<String> dayposition_fc = new ArrayList<String>();
        ArrayList<String> location_fc = new ArrayList<String>();
        ArrayList<ArrayList<String>> av_staff = new ArrayList<ArrayList<String>>();
        //set location with each position: CC1 in AP or CCB in NOAR on each day
        location_fc.add("ABERFOYLE PARK");
        location_fc.add("ABERFOYLE PARK");
        location_fc.add("WILLUNGA");
        location_fc.add("WILLUNGA");
        location_fc.add("WOODCROFT");
        location_fc.add("WOODCROFT");
        location_fc.add("NOARLUNGA");
        location_fc.add("NOARLUNGA");
        location_fc.add("NOARLUNGA");

        //set positions in each day
        dayposition_fc.add("FC3");
        dayposition_fc.add("CCB");
        dayposition_fc.add("FC1");
        dayposition_fc.add("CCB");
        dayposition_fc.add("FC2");
        dayposition_fc.add("CCB");
        dayposition_fc.add("FC1");
        dayposition_fc.add("FC2");
        dayposition_fc.add("CCB");

        ArrayList<String> av_staff_perday = new ArrayList<String>();

        for (int l = 0; l < 20; l++) {
            av_staff_perday = new ArrayList<String>();
            av_staff = new ArrayList<ArrayList<String>>();
            for (int i = 0; i < dayposition_fc.size(); i++) {
                av_staff_perday = new ArrayList<String>();
                av_staff_perday = av_staff(location_fc.get(i), dayposition_fc.get(i), l);
                av_staff.add(av_staff_perday);
            }
            for (int i = 0; i < av_staff.size(); i++) {
                System.out.println(l + "    " + dayposition_fc.get(i) + "    " + location_fc.get(i) + "     " + av_staff.get(i));
            }

            av_position_fc.add(new avaible_position(l, (ArrayList<String>) location_fc.clone(), (ArrayList<String>) dayposition_fc.clone(), (ArrayList<ArrayList<String>>) av_staff.clone()));
        }

        for (int i = 0; i < dayposition_fc.size(); i++) {
            day_list_fc.add(new position_result(dayposition_fc.get(i), location_fc.get(i), ""));
        }
        /*
         for(int i=0;i<dayposition_fc.size();i++){
         System.out.println(day_list_fc.get(i).position);
         }
         */
    }

    public void load_days_positions_cc() {//monday
        ArrayList<String> dayposition_cc = new ArrayList<String>();
        ArrayList<String> dayposition_cc_1 = new ArrayList<String>();
        ArrayList<String> dayposition_cc_non = new ArrayList<String>();
        ArrayList<String> dayposition_cc_non1 = new ArrayList<String>();

        ArrayList<String> location_cc = new ArrayList<String>();
        ArrayList<ArrayList<String>> av_staff = new ArrayList<ArrayList<String>>();
        ArrayList<String> av_staff_perday = new ArrayList<String>();

        //monday
        dayposition_cc.add("CC1");
        dayposition_cc.add("CC1");
        dayposition_cc.add("CC1");
        dayposition_cc.add("CC1");
        dayposition_cc.add("CC1");
        dayposition_cc.add("CC2");
        dayposition_cc.add("CC2");
        dayposition_cc.add("CC2");
        dayposition_cc.add("CC2");
        dayposition_cc.add("CC2");
        dayposition_cc_non.add("CC5");
        dayposition_cc_non.add("CC5");
        dayposition_cc_non.add("CC3");

        //tusday to friday
        dayposition_cc_1.add("CC1");
        dayposition_cc_1.add("CC1");
        dayposition_cc_1.add("CC1");
        dayposition_cc_1.add("CC1");
        dayposition_cc_1.add("CC2");
        dayposition_cc_1.add("CC2");
        dayposition_cc_1.add("CC2");
        dayposition_cc_1.add("CC2");
        dayposition_cc_non1.add("CC5");
        dayposition_cc_non1.add("CC5");
        dayposition_cc_non1.add("CC7");

        for (int l = 0; l < 20; l++) {
            av_staff_perday = new ArrayList<String>();
            av_staff = new ArrayList<ArrayList<String>>();
            if (l % 5 == 0) {
                for (int i = 0; i < dayposition_cc.size(); i++) {
                    av_staff_perday = new ArrayList<String>();
                    av_staff_perday = av_staff_cc("", dayposition_cc.get(i), l);
                    av_staff.add(av_staff_perday);
                }
                av_position_cc_half.add(new avaible_position(l, (ArrayList<String>) location_cc.clone(), (ArrayList<String>) dayposition_cc_non.clone(), (ArrayList<ArrayList<String>>) av_staff.clone()));
                av_position_cc.add(new avaible_position(l, (ArrayList<String>) location_cc.clone(), (ArrayList<String>) dayposition_cc.clone(), (ArrayList<ArrayList<String>>) av_staff.clone()));
            }
            if (l % 5 != 0) {
                for (int i = 0; i < dayposition_cc_1.size(); i++) {
                    av_staff_perday = new ArrayList<String>();
                    av_staff_perday = av_staff_cc("", dayposition_cc_1.get(i), l);
                    av_staff.add(av_staff_perday);
                }
                av_position_cc_half.add(new avaible_position(l, (ArrayList<String>) location_cc.clone(), (ArrayList<String>) dayposition_cc_non1.clone(), (ArrayList<ArrayList<String>>) av_staff.clone()));
                av_position_cc.add(new avaible_position(l, (ArrayList<String>) location_cc.clone(), (ArrayList<String>) dayposition_cc_1.clone(), (ArrayList<ArrayList<String>>) av_staff.clone()));
            }
            //test av staff in cc
            //for(int i=0;i<av_staff.size();i++){
            // System.out.println(l+"     "+dayposition_cc.get(i)+"     "+av_staff.get(i));        
            //}

            //av_position_cc.add(new avaible_position(l, (ArrayList<String>) location_cc.clone(), (ArrayList<String>) dayposition_cc.clone(), (ArrayList<ArrayList<String>>) av_staff.clone()));
        }

        for (int i = 0; i < dayposition_cc.size(); i++) {
            day_list_cc.add(new position_result(dayposition_cc.get(i), "", ""));
        }
    }

    public ArrayList<String> av_staff(String location, String position, int days) {
        ArrayList<String> av_staff = new ArrayList<String>();
        for (int i = 0; i < staff.size(); i++) {
            //System.out.println(staff.get(i).workingday[days]);
            if (staff.get(i).baseday.position.get(staff.get(i).baseday.location.indexOf(location)).contains(position) && staff.get(i).workingday[days].equals("CC")) {
                av_staff.add(staff.get(i).name);
                //System.out.println(staff.get(i).workingday[days]);
            }
        }

        //System.out.println(av_staff);
        return av_staff;

    }

    public ArrayList<String> av_staff_cc(String location, String position, int days) {
        ArrayList<String> av_staff = new ArrayList<String>();
        for (int i = 0; i < staff.size(); i++) {
            //System.out.println(staff.get(i).workingday[days]);
            if (staff.get(i).workingday[days].equals("CC")) {
                av_staff.add(staff.get(i).name);
                //System.out.println(staff.get(i).workingday[days]);
            }
        }

        //System.out.println(av_staff);
        return av_staff;

    }

    public void roster_baseday() {
        //add special to real av list
        //System.out.println(av_position_cc.get(0).postion);
        //transfer("thur_w4");
        /*
         for (int i = 0; i < special.size(); i++) {
         //check av_position in cc
         for (int j = 0; j < av_position_cc.size(); j++) {
         if (av_position_cc.get(j).day == transfer(special.get(i)[3])) {
         int index = 0;
         for (int k = 0; k < av_position_cc.get(j).postion.size(); k++) {
         if (av_position_cc.get(j).postion.get(k).equals(special.get(i)[2]) && av_position_cc.get(j).av_staff.get(k).size() > 1) {
         av_position_cc.get(j).av_staff.get(k).clear();
         av_position_cc.get(j).av_staff.get(k).add(special.get(i)[0]);
         break;
         }
         }
         }
         }

       
        
         //check av_position in fc
         for (int j = 0; j < av_position_fc.size(); j++) {
         if (av_position_fc.get(j).day == transfer(special.get(i)[3])) {
         int index = 0;
         for (int k = 0; k < av_position_fc.get(j).postion.size(); k++) {
         if (av_position_fc.get(j).postion.get(k).equals(special.get(i)[2]) && av_position_fc.get(j).av_staff.get(k).size() > 1 && av_position_fc.get(j).location.get(j).equals(special.get(i)[1])) {
         //System.out.println("33333333333333");
         av_position_fc.get(j).av_staff.get(k).clear();
         av_position_fc.get(j).av_staff.get(k).add(special.get(i)[0]);
         break;
         }
         }
         }
         }

         }
         */

        //av_cc_staff[i].names=new ArrayList<String>();
        //test output after make special
        for (int i = 0; i < av_position_cc.size(); i++) {
            for (int j = 0; j < av_position_cc.get(i).postion.size(); j++) {
                System.out.println(av_position_cc.get(i).day + "    " + av_position_cc.get(i).postion.get(j) + "    " + av_position_cc.get(i).av_staff.get(j));
            }
        }
        //make clone
        for (int days = 0; days < 20; days++) {
            make_roster(days);
            //day_roster_clone.clear();
            // make_roster(days);
            // for(int i=0;i<50;i++){
            //day_roster_clone.clear();
            //make_roster(days);
                /*
             int index=1;
             for(int j=0;j<day_roster_clone.size();j++)
             if(day_roster_clone.get(j).staff.isEmpty()){
             System.out.println(day_roster_clone.get(j).location);
             index=0;
             }
             if(index==1)
             break;
             */
            //}

            roster_clone.add((ArrayList<position_result>) day_roster_clone.clone());
        }

        //test all roster which have been done
        for (int i = 0; i < roster_clone.size(); i++) {
            System.out.println("DAY " + i + ":");
            for (int j = 0; j < roster_clone.get(i).size(); j++) {
                System.out.println(roster_clone.get(i).get(j).position + "  " + roster_clone.get(i).get(j).location + "  " + roster_clone.get(i).get(j).staff);
            }

        }

        for (int i = 0; i < roster_clone.size(); i++) {
            System.out.println("DAY " + i + ":");
            for (int j = 0; j < roster_clone.get(i).size(); j++) {
                if (roster_clone.get(i).get(j).staff.isEmpty()) {
                    System.out.println(roster_clone.get(i).get(j).position + "  " + roster_clone.get(i).get(j).location);
                }
            }

        }
    }

    void make_roster(int days) {
        //System.out.println(days + " day");
        av_position_fc_clone = new ArrayList<avaible_position>();
        av_position_cc_clone = new ArrayList<avaible_position>();
        //day_list_fc_clone.clear();
        //day_list_cc_clone.clear();
        av_basestaff_clone = new ArrayList<ArrayList<String>>();
        av_nonbasestaff_clone = new ArrayList<ArrayList<String>>();
        //day_roster_clone.clear();

        av_position_fc_clone = (ArrayList<avaible_position>) av_position_fc.clone();
        av_position_cc_clone = (ArrayList<avaible_position>) av_position_cc.clone();
        av_position_cc_half_clone = (ArrayList<avaible_position>) av_position_cc_half.clone();

        //day_list_fc_clone = (ArrayList<position_result>) day_list_fc.clone();
        //day_list_cc_clone = (ArrayList<position_result>) day_list_cc.clone();
        av_basestaff_clone = (ArrayList<ArrayList<String>>) av_basestaff.clone();
        av_nonbasestaff_clone = (ArrayList<ArrayList<String>>) av_nonbasestaff.clone();
        day_roster_clone = (ArrayList<position_result>) day_roster.clone();
        //System.out.println("   "+av_position_cc.get(days).postion+"      "+days);
        av_cc_staff = new ArrayList<ArrayList<String>>();
        av_cc_staff_clone = new ArrayList<ArrayList<String>>();
        av_cc_staff_clone = (ArrayList<ArrayList<String>>) av_cc_staff.clone();

        //test friday_week1
        //find out which staff can do less job input is day(0-19)
        //System.out.println(av_basestaff_clone.get(4).size());
        // int days=1;
        //set number of cc 
        if (days % 5 == 0) {
            amount_of_cc[0] = 1;
            amount_of_cc[1] = 1;
            amount_of_cc[2] = 3;
            amount_of_cc[3] = 8;
        } else {
            amount_of_cc[0] = 1;
            amount_of_cc[1] = 1;
            amount_of_cc[2] = 3;
            amount_of_cc[3] = 6;
        }

        //set off
        for (int j = 0; j < staff.size(); j++) {//check all staff
            String name = staff.get(j).name;
            if(staff.get(j).workingday[days].equals("OFF")){
                day_roster_clone.add(new position_result("OFF",staff.get(j).location,name));
            }
        }

        //set special
        for (int i = 0; i < special.size(); i++) {
            if (transfer(special.get(i)[3]) == days) {
                //System.out.println(transfer(special.get(i)[3]));
                if (special.get(i)[2].equals("CC1") || special.get(i)[2].equals("CC2") || special.get(i)[2].equals("CC3") || special.get(i)[2].equals("CC4") || special.get(i)[2].equals("CC5") || special.get(i)[2].equals("CC6") || special.get(i)[2].equals("CC7") || special.get(i)[2].equals("CC8") || special.get(i)[2].equals("CC9")) {
                    day_roster_clone.add(new position_result(special.get(i)[2], special.get(i)[1], special.get(i)[0]));
                    av_basestaff_clone.get(days).remove(special.get(i)[0]);

                    int location_number = 0;
                    if (special.get(i)[1].equals("ABERFOYLE PARK")) {
                        location_number = 0;
                    }
                    if (special.get(i)[1].equals("WILLUNGA")) {
                        location_number = 1;
                    }
                    if (special.get(i)[1].equals("WOODCROFT")) {
                        location_number = 2;
                    }
                    if (special.get(i)[1].equals("NOARLUNGA")) {
                        location_number = 3;
                    }
                    amount_of_cc[location_number]--;
                    for (int j = 0; j < staff.size(); j++) {
                        if (special.get(i)[0].equals(staff.get(j).name)) {
                            if (staff.get(j).location.equals("ABERFOYLE PARK")) {
                                location_number = 0;
                            }
                            if (staff.get(j).location.equals("WILLUNGA")) {
                                location_number = 1;
                            }
                            if (staff.get(j).location.equals("WOODCROFT")) {
                                location_number = 2;
                            }
                            if (staff.get(j).location.equals("NOARLUNGA")) {
                                location_number = 3;
                            }
                        }
                    }
                    amount_of_cc[location_number]++;

                    int index = 0;
                    for (int p = 0; p < av_position_cc_clone.get(days).postion.size(); p++) {
                        if (av_position_cc_clone.get(days).postion.get(p).equals(special.get(i)[2])) {
                            index = p;
                            break;
                        }
                    }

                    if (av_position_cc_clone.get(days).location.size() > 0) {
                        av_position_cc_clone.get(days).location.remove(index);
                    }
                    av_position_cc_clone.get(days).postion.remove(index);
                    //if(av_position_cc_clone.get(days).av_staff.size()>0)
                    av_position_cc_clone.get(days).av_staff.remove(index);
                    for (int k = 0; k < av_position_cc_clone.get(days).av_staff.size(); k++) {
                        av_position_cc_clone.get(days).av_staff.get(k).remove(special.get(i)[0]);
                    }
                    for (int k = 0; k < av_position_fc_clone.get(days).av_staff.size(); k++) {
                        av_position_fc_clone.get(days).av_staff.get(k).remove(special.get(i)[0]);
                    }
                }

                if (special.get(i)[2].equals("FC1") || special.get(i)[2].equals("FC2") || special.get(i)[2].equals("FC3") || special.get(i)[2].equals("CCB") || special.get(i)[2].equals("FC2N") || special.get(i)[2].equals("FC2CC") || special.get(i)[2].equals("FC2BU")) {
                    day_roster_clone.add(new position_result(special.get(i)[2], special.get(i)[1], special.get(i)[0]));
                    av_basestaff_clone.get(days).remove(special.get(i)[0]);
                    int index = 0;
                    for (int p = 0; p < av_position_fc_clone.get(days).postion.size(); p++) {
                        if (av_position_fc_clone.get(days).postion.get(p).equals(special.get(i)[2])) {
                            index = p;
                            break;
                        }
                    }

                    if (av_position_fc_clone.get(days).location.size() > 0) {
                        av_position_fc_clone.get(days).location.remove(index);
                    }
                    av_position_fc_clone.get(days).postion.remove(index);
                    //if(av_position_cc_clone.get(days).av_staff.size()>0)
                    av_position_fc_clone.get(days).av_staff.remove(index);
                    for (int k = 0; k < av_position_cc_clone.get(days).av_staff.size(); k++) {
                        av_position_cc_clone.get(days).av_staff.get(k).remove(special.get(i)[0]);
                    }
                    for (int k = 0; k < av_position_fc_clone.get(days).av_staff.size(); k++) {
                        av_position_fc_clone.get(days).av_staff.get(k).remove(special.get(i)[0]);
                    }
                }
                if (special.get(i)[2].equals("COORD") || special.get(i)[2].equals("PL") || special.get(i)[2].equals("AW") || special.get(i)[2].equals("AL") || special.get(i)[2].equals("LSL") || special.get(i)[2].equals("OFFLINE")) {
                    day_roster_clone.add(new position_result(special.get(i)[2], special.get(i)[1], special.get(i)[0]));
                    av_basestaff_clone.get(days).remove(special.get(i)[0]);
                    for (int k = 0; k < av_position_cc_clone.get(days).av_staff.size(); k++) {
                        av_position_cc_clone.get(days).av_staff.get(k).remove(special.get(i)[0]);
                    }
                    for (int k = 0; k < av_position_fc_clone.get(days).av_staff.size(); k++) {
                        av_position_fc_clone.get(days).av_staff.get(k).remove(special.get(i)[0]);
                    }
                }
            }

            //System.out.println(special.get(i)[0]+"  "+special.get(i)[1]+"  "+special.get(i)[2]+"   "+transfer(special.get(i)[3]));
        }

        //allocating basestaff
        for (int j = 0; av_basestaff_clone.get(days).size() > 0; j++) {

            String name = find_staff(days);

            //System.out.println(name);
            ArrayList<String> s = find_position(name, days);
            //System.out.println(name);
            //if(s.size()>0)
            //System.out.println(s);
            if (s.size() > 0) {
                if (s.get(0).equals("CC1") || s.get(0).equals("CC2") || s.get(0).equals("CC3") || s.get(0).equals("CC4") || s.get(0).equals("CC5") || s.get(0).equals("CC6") || s.get(0).equals("CC7") || s.get(0).equals("CC8") || s.get(0).equals("CC9")) {
                    day_roster_clone.add(new position_result(s.get(0), "", name));
                    av_basestaff_clone.get(days).remove(name);
                    if (av_position_cc_clone.get(days).location.size() > 0) {
                        av_position_cc_clone.get(days).location.remove(Integer.parseInt(s.get(2)));
                    }
                        //if(av_position_cc_clone.get(days).postion.size()>0)
                    //System.out.print(av_position_cc_clone.get(days).postion.get(Integer.parseInt(s.get(2))));
                    //System.out.println("   " + av_position_cc_clone.get(days).av_staff.get(Integer.parseInt(s.get(2))));

                    // av_position_cc_clone.get(days).av_staff.get(Integer.parseInt(s.get(2)));
                    av_position_cc_clone.get(days).postion.remove(Integer.parseInt(s.get(2)));
                    //if(av_position_cc_clone.get(days).av_staff.size()>0)
                    av_position_cc_clone.get(days).av_staff.remove(Integer.parseInt(s.get(2)));
                    for (int k = 0; k < av_position_cc_clone.get(days).av_staff.size(); k++) {
                        av_position_cc_clone.get(days).av_staff.get(k).remove(name);
                    }
                    for (int k = 0; k < av_position_fc_clone.get(days).av_staff.size(); k++) {
                        av_position_fc_clone.get(days).av_staff.get(k).remove(name);
                    }

                } else {
                    day_roster_clone.add(new position_result(s.get(0), s.get(1), name));
                    av_basestaff_clone.get(days).remove(name);
                    if (av_position_fc_clone.get(days).location.size() > 0) {
                        av_position_fc_clone.get(days).location.remove(Integer.parseInt(s.get(2)));
                    }
                        //System.out.print(av_position_fc_clone.get(days).postion.get(Integer.parseInt(s.get(2))));
                    // System.out.print("  "+av_position_fc_clone.get(days).location.get(Integer.parseInt(s.get(2))));
                    //System.out.println("   " + av_position_fc_clone.get(days).av_staff.get(Integer.parseInt(s.get(2))));

                    //if(av_position_cc_clone.get(days).postion.size()>0)
                    av_position_fc_clone.get(days).postion.remove(Integer.parseInt(s.get(2)));
                    //if(av_position_cc_clone.get(days).av_staff.size()>0)
                    av_position_fc_clone.get(days).av_staff.remove(Integer.parseInt(s.get(2)));
                    for (int k = 0; k < av_position_fc_clone.get(days).av_staff.size(); k++) {
                        av_position_fc_clone.get(days).av_staff.get(k).remove(name);
                    }
                    for (int k = 0; k < av_position_cc_clone.get(days).av_staff.size(); k++) {
                        av_position_cc_clone.get(days).av_staff.get(k).remove(name);
                    }
                }

                //System.out.println(name);
                //System.out.println(day_roster_clone.get(0).position+"  "+day_roster_clone.get(0).staff+"  "+day_roster_clone.get(0).location);
            } else {
                av_basestaff_clone.get(days).remove(name);
            }
        }

        System.out.println("DAY" + days + ":");
        //System.out.println(av_position_cc_clone.get(days).postion);
        //System.out.println(av_position_fc_clone.get(days).postion);
        //orgnise location
        //for (int k = 0; k < day_roster_clone.size(); k++) {
        //    if (day_roster_clone.get(k).position.equals("CC1") || day_roster_clone.get(k).position.equals("CC2") || day_roster_clone.get(k).position.equals("CC3") || day_roster_clone.get(k).position.equals("CC4") || day_roster_clone.get(k).position.equals("CC5") || day_roster_clone.get(k).position.equals("CC6") || day_roster_clone.get(k).position.equals("CC7") || day_roster_clone.get(k).position.equals("CC8") || day_roster_clone.get(k).position.equals("CC9")) {

        {
            cc_staff = new ArrayList<String>();
            for (int i = 0; i < day_roster_clone.size(); i++) {
                if (day_roster_clone.get(i).position.equals("CC1") || day_roster_clone.get(i).position.equals("CC2") || day_roster_clone.get(i).position.equals("CC3") || day_roster_clone.get(i).position.equals("CC4") || day_roster_clone.get(i).position.equals("CC5") || day_roster_clone.get(i).position.equals("CC6") || day_roster_clone.get(i).position.equals("CC7") || day_roster_clone.get(i).position.equals("CC8") || day_roster_clone.get(i).position.equals("CC9")) {
                    cc_staff.add(day_roster_clone.get(i).staff);
                }
            }

            int index = 0;
            int index1 = 0;
            ArrayList<String> ap_staff = new ArrayList<String>();
            ArrayList<String> will_staff = new ArrayList<String>();
            ArrayList<String> wcft_staff = new ArrayList<String>();
            ArrayList<String> noar_staff = new ArrayList<String>();
            for (int i = 0; i < cc_staff.size(); i++) {
                for (int j = 0; j < staff.size(); j++) {
                    if (staff.get(j).name.equals(cc_staff.get(i))) {
                        index = j;
                        break;
                    }
                }
                for (int j = 0; j < staff.get(index).baseday.position.size(); j++) {
                    if (staff.get(index).baseday.position.get(j).size() > 0) {
                        for (int k = 0; k < staff.get(index).baseday.position.get(j).size(); k++) {
                            for (int l = 0; l < day_roster_clone.size(); l++) {
                                if (cc_staff.get(i).equals(day_roster_clone.get(l).staff)) {
                                    index1 = l;
                                }
                            }
                            if (staff.get(index).baseday.position.get(j).get(k).equals(day_roster_clone.get(index1).position)) {
                                //System.out.println(staff.get(index).name+"      "+j);
                                //av_cc_staff[j].names.add(staff.get(index).name);
                                //av_cc_staff[j].names.add("gggg");
                                if (j == 0) {
                                    ap_staff.add(staff.get(index).name);
                                }
                                if (j == 1) {
                                    will_staff.add(staff.get(index).name);
                                }
                                if (j == 2) {
                                    wcft_staff.add(staff.get(index).name);
                                }
                                if (j == 3) {
                                    noar_staff.add(staff.get(index).name);
                                }

                            }
                        }
                    }
                }

            }
            av_cc_staff.add(ap_staff);
            av_cc_staff.add(will_staff);
            av_cc_staff.add(wcft_staff);
            av_cc_staff.add(noar_staff);
            av_cc_staff_clone = (ArrayList<ArrayList<String>>) av_cc_staff.clone();
            for (int p = 0; p < av_cc_staff_clone.size(); p++) {
                //System.out.println(av_cc_staff.get(p));
            }

            // System.out.println(name);
            // System.out.println(cc_staff.size());
            //String location = find_location(name);
            //special
            for (int q = 0; q < day_roster_clone.size(); q++) {
                String name;
                if (!day_roster_clone.get(q).location.isEmpty() && cc_staff.contains(day_roster_clone.get(q).staff)) {
                    name = day_roster_clone.get(q).staff;
                    cc_staff.remove(name);
                    for (int r = 0; r < av_cc_staff_clone.size(); r++) {
                        av_cc_staff_clone.get(r).remove(name);

                    }
                    int location_number = 3;
                    if (location.equals("ABERFOYLE PARK")) {
                        location_number = 0;
                    }
                    if (location.equals("WILLUNGA")) {
                        location_number = 1;
                    }
                    if (location.equals("WOODCROFT")) {
                        location_number = 2;
                    }
                    if (location.equals("NOARLUNGA")) {
                        location_number = 3;
                    }
                    amount_of_cc[location_number]--;
                    if (amount_of_cc[location_number] < 1) {
                        av_cc_staff_clone.get(location_number).clear();
                    }
                }
            }

            for (int p = cc_staff.size(); p > 0; p--) {

                int location_number = 0;

                // if (amount_of_cc[location_number] < 1) {
                //    av_cc_staff.get(location_number).clear();
                // }
                //if(location_number<5){
                String name = find_staff();
                // System.out.println(name);
                // System.out.println(cc_staff.size());
                String location = find_location(name);
                //System.out.println(amount_of_cc[3]+"  33333333333333");
                for (int q = 0; q < day_roster_clone.size(); q++) {
                    if (day_roster_clone.get(q).staff.equals(name) && day_roster_clone.get(q).location.isEmpty()) {
                        day_roster_clone.get(q).location = location;
                    }
                }

                if (location.equals("ABERFOYLE PARK")) {
                    location_number = 0;
                }
                if (location.equals("WILLUNGA")) {
                    location_number = 1;
                }
                if (location.equals("WOODCROFT")) {
                    location_number = 2;
                }
                if (location.equals("NOARLUNGA")) {
                    location_number = 3;
                }
                amount_of_cc[location_number]--;

                cc_staff.remove(name);
                for (int q = 0; q < av_cc_staff_clone.size(); q++) {
                    av_cc_staff_clone.get(q).remove(name);

                    //}
                }
            }

        }

        //insert other fc cc and ccb
        for (int j = 0; av_position_fc_clone.get(days).postion.size() > 0; j++) {

            String[] position_name = find_position_nonbaseday(days);
            String name = find_fc_nonbaseday(days, position_name);
            //String name=find_staff_non(days);

            day_roster_clone.add(new position_result(position_name[0], position_name[1], name));
        }

        //allocate CC 
        for (int j = 0; av_position_cc_clone.get(days).postion.size() > 0; j++) {

            String[] position_name = find_position_nonbaseday(days);
            String name = find_fc_nonbaseday(days, position_name);
            int location_number = 0;
            //System.out.println(location);

            if (position_name[1].equals("ABERFOYLE PARK")) {
                location_number = 0;
            }
            if (position_name[1].equals("WILLUNGA")) {
                location_number = 1;
            }
            if (position_name[1].equals("WOODCROFT")) {
                location_number = 2;
            }
            if (position_name[1].equals("NOARLUNGA")) {
                location_number = 3;
            }
            amount_of_cc[location_number]--;

            day_roster_clone.add(new position_result(position_name[0], position_name[1], name));
        }
        //allocate CC5 CC7(less than a shift)

        av_position_cc_clone = (ArrayList<avaible_position>) av_position_cc_half_clone.clone();
        for (int j = 0; av_position_cc_clone.get(days).postion.size() > 0; j++) {

            String[] position_name = find_position_nonbaseday(days);
            String name = find_fc_nonbaseday(days, position_name);
            int location_number = 0;
            System.out.println("            " + position_name[1] + "      " + position_name[0]);
            /*
             for (int p = 0; p < amount_of_cc.length; p++) {
             System.out.println(amount_of_cc[p]);
             }
             */
            if (position_name[1].equals("ABERFOYLE PARK")) {
                location_number = 0;
            }
            if (position_name[1].equals("WILLUNGA")) {
                location_number = 1;
            }
            if (position_name[1].equals("WOODCROFT")) {
                location_number = 2;
            }
            if (position_name[1].equals("NOARLUNGA")) {
                location_number = 3;
            }
            amount_of_cc[location_number]--;

            day_roster_clone.add(new position_result(position_name[0], position_name[1], name));
        }

        /*for (int p = 0; p < amount_of_cc.length; p++) {
         System.out.println(amount_of_cc[p]);
         }*/
        // dayposition_cc_non1
        //System.out.println(av_position_fc_clone.get(days).postion + "" + av_position_cc_clone.get(days).postion);
        // System.out.println(av_position_fc_clone.get(days).location + "" + av_position_cc_clone.get(days).location);
        //System.out.println(av_nonbasestaff_clone.get(days));
        //orgnise nonbasestaff to other position
    }

    String[] find_position_nonbaseday_cc(int day) {
        String[] s = new String[2];
        if (!av_position_fc_clone.get(day).postion.isEmpty()) {
            s[0] = av_position_fc_clone.get(day).postion.get(0);
            s[1] = av_position_fc_clone.get(day).location.get(0);
            av_position_fc_clone.get(day).postion.remove(0);
            av_position_fc_clone.get(day).location.remove(0);
        } else {
            s[0] = av_position_cc_clone.get(day).postion.get(0);
            s[1] = "";
            av_position_cc_clone.get(day).postion.remove(0);
        }
        return s;
    }

    String[] find_position_nonbaseday(int day) {
        String[] s = new String[2];
        if (!av_position_fc_clone.get(day).postion.isEmpty()) {
            s[0] = av_position_fc_clone.get(day).postion.get(0);
            s[1] = av_position_fc_clone.get(day).location.get(0);
            av_position_fc_clone.get(day).postion.remove(0);
            av_position_fc_clone.get(day).location.remove(0);
        } else {
            s[0] = av_position_cc_clone.get(day).postion.get(0);
            //s[1] = "";
            for (int j = 0; j < amount_of_cc.length; j++) {
                if (amount_of_cc[j] > 0) {
                    s[1] = staff.get(0).nonbaseday.location.get(j);
                }
            }
            av_position_cc_clone.get(day).postion.remove(0);
        }
        return s;
    }

    String find_fc_nonbaseday(int day, String[] position) {
        int position_no = 0;
        int index = 0;
        String name = "";
        for (int i = 0; i < staff.get(0).baseday.location.size(); i++) {
            if (staff.get(0).baseday.location.get(i).equals(position[1])) {
                position_no = i;
            }
        }
        for (int i = 0; i < av_nonbasestaff_clone.get(day).size(); i++) {

            for (int j = 0; j < staff.size(); j++) {
                if (av_nonbasestaff_clone.get(day).get(i).equals(staff.get(j).name)) {
                    int temp = 0;
                    for (int p = 0; p < day_roster_clone.size(); p++) {
                        if (day_roster_clone.get(p).staff.equals(staff.get(j).name)) {
                            temp = 1;
                            break;
                        }
                    }
                    if (staff.get(j).nonbaseday.position.get(position_no).contains(position[0]) && temp == 0) {
                        name = staff.get(j).name;
                    }
                }
            }
        }
        av_nonbasestaff_clone.get(day).remove(name);
        return name;
    }

    String find_staff_nonbaseday(int day) {
        ArrayList<String> amount_of_position_name = new ArrayList<String>();
        ArrayList<Integer> amount_of_position = new ArrayList<Integer>();
        int index = 0;
        for (int i = 0; i < av_nonbasestaff_clone.get(day).size(); i++) {
            //for(int j=0;j<;j++)
            String name = av_nonbasestaff_clone.get(day).get(i);
            int av_position_amount = 0;
            for (int j = 0; j < staff.get(i).nonbaseday.position.size(); j++) {
                //int index=0;
                //System.out.println(staff.indexOf("Amanda Faraonio"));
                for (int k = 0; k < staff.size(); k++) {
                    if (staff.get(k).name.equals(name)) {
                        index = k;
                        break;
                    }
                }
                av_position_amount = staff.get(index).nonbaseday.position.get(j).size() + av_position_amount;
                //System.out.println(staff.get(index).name+"    "+staff.get(index).baseday.position+"    "+av_position_amount);
            }

            //System.out.println(name + "   " + av_position_amount);
            if (av_position_amount > 0) {
                if (amount_of_position.size() == 0 || amount_of_position.get(0) == av_position_amount) {
                    amount_of_position_name.add(name);
                    amount_of_position.add(av_position_amount);
                } else if (!amount_of_position.isEmpty()) {
                    if (amount_of_position.get(0) > av_position_amount) {
                        amount_of_position_name.clear();
                        amount_of_position.clear();
                        //System.out.println(staff.get(index).name);
                        // System.out.println(staff.get(index).name + "   " + i + "   " + index);
                        amount_of_position_name.add(name);
                        amount_of_position.add(av_position_amount);
                    }
                }
            }

        }
        //for (int i = 0; i < amount_of_position.size(); i++) {

        //System.out.println(amount_of_position_name+"   "+amount_of_position);
        //}
        java.util.Random random = new java.util.Random();
        //random.nextInt(100));
        int ran = random.nextInt(amount_of_position_name.size());
        //int ran=random.nextInt(50);
        //System.out.println(ran);
        return amount_of_position_name.get(ran);
    }

    String find_location(String name) {
        int index = 0;
        int staff_amount = 0;
        String location = "";

        for (int i = 0; i < av_cc_staff_clone.size(); i++) {
            if (amount_of_cc[i] > 0) {
                //System.out.println(amount_of_cc[3]+"  33333333333333");
                for (int j = 0; j < av_cc_staff_clone.get(i).size(); j++) {
                    if (av_cc_staff_clone.get(i).get(j).equals(name) && staff_amount < av_cc_staff_clone.get(i).size()) {
                        staff_amount = av_cc_staff_clone.get(i).size();
                        // System.out.println(amount_of_cc[i]+"  "+i);
                        index = i;
                        break;
                    }

                }
            }
        }
        //System.out.println(index+"iiiiiiiiiii");
        if (index == 0) {
            location = "ABERFOYLE PARK";
        }
        if (index == 1) {
            location = "WILLUNGA";
        }
        if (index == 2) {
            location = "WOODCROFT";
        }
        if (index == 3) {
            location = "NOARLUNGA";
        }

        return location;
    }

    String find_staff() {
        ArrayList<String> staff_name = new ArrayList<String>();
        ArrayList<String> location = new ArrayList<String>();
        ArrayList<ArrayList<String>> staff_location = new ArrayList<ArrayList<String>>();
        for (int i = 0; i < cc_staff.size(); i++) {
            //if(!day_roster_clone.get(i).location.isEmpty())
            //if (day_roster_clone.get(i).position.equals("CC1") || day_roster_clone.get(i).position.equals("CC2") || day_roster_clone.get(i).position.equals("CC3") || day_roster_clone.get(i).position.equals("CC4") || day_roster_clone.get(i).position.equals("CC5") || day_roster_clone.get(i).position.equals("CC6") || day_roster_clone.get(i).position.equals("CC7") || day_roster_clone.get(i).position.equals("CC8") || day_roster_clone.get(i).position.equals("CC9")) {
            location = new ArrayList<String>();
            int index = 0;
            int amount_of_location = 0;
            String name = cc_staff.get(i);
            for (int j = 0; j < staff.size(); j++) {
                if (staff.get(j).name.equals(name)) {
                    index = j;
                    break;
                }
            }
            for (int j = 0; j < staff.get(index).baseday.position.size(); j++) {
                if (staff.get(index).baseday.position.get(j).size() > 0) {
                    amount_of_location++;
                    location.add(staff.get(index).baseday.location.get(j));
                    //System.out.println(location);
                }
            }
            if (staff_name.isEmpty() || amount_of_location == staff_location.get(0).size()) {
                staff_name.add(name);
                staff_location.add((ArrayList<String>) location.clone());
            } else if (amount_of_location < staff_location.get(0).size()) {
                staff_name.clear();
                staff_location.clear();
                staff_name.add(name);
                staff_location.add((ArrayList<String>) location.clone());
            }
            //jTextArea1.append(staff.get(0).baseday.position.get(i));
            //System.out.println(staff_name);
            if (staff_location.size() > 0) {
                //   System.out.println(staff_location.get(0));
            }

            //}
        }
        java.util.Random random = new java.util.Random();
        //random.nextInt(100));
        //System.out.println(staff_name.size());
        int ran = random.nextInt(staff_name.size());
        //int ran=random.nextInt(50);

        return staff_name.get(ran);

        //return null;
    }

    String find_staff_non(int day) {
        ArrayList<String> amount_of_position_name = new ArrayList<String>();
        ArrayList<Integer> amount_of_position = new ArrayList<Integer>();
        int index = 0;
        for (int i = 0; i < av_nonbasestaff_clone.get(day).size(); i++) {
            //for(int j=0;j<;j++)
            String name = av_nonbasestaff_clone.get(day).get(i);
            int av_position_amount = 0;
            for (int j = 0; j < staff.get(i).nonbaseday.position.size(); j++) {
                //int index=0;
                //System.out.println(staff.indexOf("Amanda Faraonio"));
                for (int k = 0; k < staff.size(); k++) {
                    if (staff.get(k).name.equals(name)) {
                        index = k;
                        break;
                    }
                }
                av_position_amount = staff.get(index).nonbaseday.position.get(j).size() + av_position_amount;
                //System.out.println(staff.get(index).name+"    "+staff.get(index).baseday.position+"    "+av_position_amount);
            }

            //System.out.println(name + "   " + av_position_amount);
            if (av_position_amount > 0) {
                if (amount_of_position.size() == 0 || amount_of_position.get(0) == av_position_amount) {
                    amount_of_position_name.add(name);
                    amount_of_position.add(av_position_amount);
                } else if (!amount_of_position.isEmpty()) {
                    if (amount_of_position.get(0) > av_position_amount) {
                        amount_of_position_name.clear();
                        amount_of_position.clear();
                        //System.out.println(staff.get(index).name);
                        // System.out.println(staff.get(index).name + "   " + i + "   " + index);
                        amount_of_position_name.add(name);
                        amount_of_position.add(av_position_amount);
                    }
                }
            }

        }
        //for (int i = 0; i < amount_of_position.size(); i++) {

        //System.out.println(amount_of_position_name+"   "+amount_of_position);
        //}
        java.util.Random random = new java.util.Random();
        //random.nextInt(100));
        int ran = random.nextInt(amount_of_position_name.size());
        //int ran=random.nextInt(50);
        //System.out.println(ran);
        return amount_of_position_name.get(ran);
    }

    String find_staff(int day) {
        ArrayList<String> amount_of_position_name = new ArrayList<String>();
        ArrayList<Integer> amount_of_position = new ArrayList<Integer>();
        int index = 0;
        for (int i = 0; i < av_basestaff_clone.get(day).size(); i++) {
            //for(int j=0;j<;j++)
            String name = av_basestaff_clone.get(day).get(i);
            int av_position_amount = 0;
            for (int j = 0; j < staff.get(i).baseday.position.size(); j++) {
                //int index=0;
                //System.out.println(staff.indexOf("Amanda Faraonio"));
                for (int k = 0; k < staff.size(); k++) {
                    if (staff.get(k).name.equals(name)) {
                        index = k;
                        break;
                    }
                }
                av_position_amount = staff.get(index).baseday.position.get(j).size() + av_position_amount;
                //System.out.println(staff.get(index).name+"    "+staff.get(index).baseday.position+"    "+av_position_amount);
            }

            //System.out.println(name + "   " + av_position_amount);
            if (av_position_amount > 0) {
                if (amount_of_position.size() == 0 || amount_of_position.get(0) == av_position_amount) {
                    amount_of_position_name.add(name);
                    amount_of_position.add(av_position_amount);
                } else if (!amount_of_position.isEmpty()) {
                    if (amount_of_position.get(0) > av_position_amount) {
                        amount_of_position_name.clear();
                        amount_of_position.clear();
                        //System.out.println(staff.get(index).name);
                        // System.out.println(staff.get(index).name + "   " + i + "   " + index);
                        amount_of_position_name.add(name);
                        amount_of_position.add(av_position_amount);
                    }
                }
            }

        }
        //for (int i = 0; i < amount_of_position.size(); i++) {

        //System.out.println(amount_of_position_name+"   "+amount_of_position);
        //}
        java.util.Random random = new java.util.Random();
        //random.nextInt(100));
        int ran = random.nextInt(amount_of_position_name.size());
        //int ran=random.nextInt(50);
        //System.out.println(ran);
        return amount_of_position_name.get(ran);
    }

    public ArrayList<String> find_position(String name, int day) {
        ArrayList<String> amount_of_position_name = new ArrayList<String>();
        ArrayList<Integer> amount_of_staff = new ArrayList<Integer>();
        ArrayList<String> amount_of_position_location = new ArrayList<String>();
        ArrayList<Integer> amount_of_index = new ArrayList<Integer>();
        int index_temp = 0;
        int index = 0;

        for (int i = 0; i < staff.size(); i++) {
            if (staff.get(i).name.equals(name)) {
                index = i;
                break;
            }
        }
        for (int i = 0; i < staff.get(index).baseday.position.size(); i++) {
            int av_staff_amount = 0;
            for (int j = 0; j < staff.get(index).baseday.position.get(i).size(); j++) {
                av_staff_amount = 0;
                String position_name = staff.get(index).baseday.position.get(i).get(j);
                String location_name = staff.get(index).baseday.location.get(i);
                //System.out.println(position_name+"  "+location_name);

                for (int k = 0; k < av_position_fc_clone.get(day).postion.size(); k++) {//FC
                    //System.out.println(av_position_fc_clone.get(day).postion.get(k)+"  "+av_position_fc_clone.get(day).av_staff.get(k).size()+"  "+av_position_fc_clone.get(day).location.get(k));
                    if (av_position_fc_clone.get(day).postion.get(k).equals(position_name) && av_position_fc_clone.get(day).location.get(k).equals(location_name)) {
                        av_staff_amount = av_staff_amount + av_position_fc_clone.get(day).av_staff.get(k).size();

                        if (amount_of_position_name.isEmpty() || amount_of_staff.get(0) == av_staff_amount) {
                            amount_of_staff.add(av_staff_amount);
                            amount_of_position_name.add(position_name);
                            amount_of_position_location.add(location_name);
                            amount_of_index.add(k);
                            //System.out.println(k);
                        }
                        if (amount_of_staff.get(0) > av_staff_amount) {//????
                            amount_of_staff.clear();
                            amount_of_position_name.clear();
                            amount_of_position_location.clear();
                            amount_of_index.clear();
                            amount_of_staff.add(av_staff_amount);
                            amount_of_position_name.add(position_name);
                            amount_of_position_location.add(location_name);
                            amount_of_index.add(k);
                            //System.out.println(k);
                        }
                    }
                }
                //CC
                for (int k = 0; k < av_position_cc_clone.get(day).postion.size(); k++) {//CC
                    av_staff_amount = 0;
                    //System.out.println(av_position_cc_clone.get(day).postion.get(k)+"  "+av_position_cc_clone.get(day).av_staff.get(k).size());
                    //System.out.println(av_position_cc_clone.get(day).postion.get(k)+"   "+position_name);
                    if (av_position_cc_clone.get(day).postion.get(k).equals(position_name)) {
                        av_staff_amount = av_staff_amount + av_position_cc_clone.get(day).av_staff.get(k).size();
                        //amount_of_position_name=position_name;
                        // System.out.println(av_staff_amount+"   "+position_name);
                        index_temp = k;

                        if (amount_of_position_name.isEmpty() || amount_of_staff.get(0) == av_staff_amount) {
                            amount_of_staff.add(av_staff_amount);
                            amount_of_position_name.add(position_name);
                            amount_of_position_location.add("");
                            amount_of_index.add(k);
                        }
                        if (amount_of_staff.get(0) > av_staff_amount) {
                            amount_of_staff.clear();
                            amount_of_position_name.clear();
                            amount_of_position_location.clear();
                            amount_of_index.clear();

                            amount_of_staff.add(av_staff_amount);
                            amount_of_position_name.add(position_name);
                            amount_of_position_location.add(location_name);
                            amount_of_index.add(k);

                        }
                    }
                }
                //System.out.println(av_position_fc_clone.get(day).postion);
                // System.out.println(av_position_cc_clone.get(day).postion);

                //System.out.println(amount_of_position_name+"   "+amount_of_position_location);
            }

        }

        java.util.Random random = new java.util.Random();
        //random.nextInt(100));
        //System.out.println(amount_of_index);
        //System.out.println(amount_of_staff);
        //System.out.println(amount_of_position_location);
        // System.out.println(amount_of_position_name);

        int ran = 0;
        if (amount_of_position_name.size() != 0) {
            ran = random.nextInt(amount_of_position_name.size());
        }

        //System.out.println(name);
        //System.out.println(amount_of_position_name.size());        
        ArrayList<String> s = new ArrayList<String>();
        if (amount_of_position_name.size() > 0) {
            s.add(amount_of_position_name.get(ran));
            s.add(amount_of_position_location.get(ran));
            s.add(String.valueOf((amount_of_index.get(ran))));
        } else {
            s = new ArrayList<String>();
        }
        return s;
    }

    int transfer(String s) {
        int week = 0;
        int day = 0;
        String sub = null;
        //get week
        sub = s.substring(s.length() - 1, s.length());
        week = Integer.parseInt(sub);   //Integer.parseInt([String]

        //get day
        sub = s.substring(0, 3);
        if (sub.equals("mon")) {
            day = 0;
        }
        if (sub.equals("tue")) {
            day = 1;
        }
        if (sub.equals("wed")) {
            day = 2;
        }
        if (sub.equals("thu")) {
            day = 3;
        }
        if (sub.equals("fri")) {
            day = 4;
        }

        //System.out.println(day+(week-1)*5);
        return day + (week - 1) * 5;
    }

    void post_results() {
        /*
         for(int i=0;i<staff.get(7).workingday.length;i++)
         System.out.println(staff.get(7).workingday[i]);
         */
        load_order();
        table = new ArrayList<ArrayList<String>>();
        ArrayList<String> rows = new ArrayList<String>();
        int row = 0;

        //add AP
        rows.add("" + row);
        row++;
        rows.add("ABERFOYLE PARK");
        table.add((ArrayList<String>) rows.clone());
        //add ap staff
        /*
         for (int i = 0; i < staff.size(); i++) {
         rows = new ArrayList<String>();
         if (staff.get(i).location.equals("ABERFOYLE PARK")) {
         rows.add("" + row);
         row++;
         rows.add(staff.get(i).name);
         table.add((ArrayList<String>) rows.clone());
         }

         }
         */

        for (int i = 0; i < order_ap.size(); i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add(order_ap.get(i));
            table.add((ArrayList<String>) rows.clone());
        }

        for (int i = 0; i < 4; i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add("ADDITIONAL STAFF");
            table.add((ArrayList<String>) rows.clone());
        }
        rows = new ArrayList<String>();
        rows.add("" + row);
        rows.add("");
        row++;
        table.add((ArrayList<String>) rows.clone());

        //add will
        rows = new ArrayList<String>();
        rows.add("" + row);
        row++;
        rows.add("WILLUNGA");
        table.add((ArrayList<String>) rows.clone());
        //add will staff
        for (int i = 0; i < order_will.size(); i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add(order_will.get(i));
            table.add((ArrayList<String>) rows.clone());
        }
        for (int i = 0; i < 4; i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add("ADDITIONAL STAFF");
            table.add((ArrayList<String>) rows.clone());
        }
        rows = new ArrayList<String>();
        rows.add("" + row);
        rows.add("");
        row++;
        table.add((ArrayList<String>) rows.clone());

        //add wcft
        rows = new ArrayList<String>();
        rows.add("" + row);
        row++;
        rows.add("WOODCROFT");
        table.add((ArrayList<String>) rows.clone());
        //add wcft staff
        for (int i = 0; i < order_wcft.size(); i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add(order_wcft.get(i));
            table.add((ArrayList<String>) rows.clone());
        }
        for (int i = 0; i < 6; i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add("ADDITIONAL STAFF");
            table.add((ArrayList<String>) rows.clone());
        }
        rows = new ArrayList<String>();
        rows.add("" + row);
        rows.add("");
        row++;
        table.add((ArrayList<String>) rows.clone());

        //add NOARLUNGA
        rows = new ArrayList<String>();
        rows.add("" + row);
        row++;
        rows.add("NOARLUNGA");
        table.add((ArrayList<String>) rows.clone());
        //add wcft staff
        for (int i = 0; i < order_noar.size(); i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add(order_noar.get(i));
            table.add((ArrayList<String>) rows.clone());
        }
        for (int i = 0; i < 6; i++) {
            rows = new ArrayList<String>();
            rows.add("" + row);
            row++;
            rows.add("ADDITIONAL STAFF");
            table.add((ArrayList<String>) rows.clone());
        }
        //System.out.println(roster_clone.size());
        //insert 

        for (int days = 0; days < roster_clone.size(); days++) {
            day_roster = new ArrayList<position_result>();
            day_roster = roster_clone.get(days);
            //System.out.println(day_roster.size());
            for (int j = 0; j < day_roster.size(); j++) {
                String name = day_roster.get(j).staff;

                int index = 0;
                for (int k = 0; k < staff.size(); k++) {//find person id in staff
                    if (staff.get(k).name.equals(name)) {
                        index = k;
                    }
                }
                if (name.isEmpty()) {
                    /*
                     for(int i=0;i<table.size();i++){
                     if(table.get(i).get(1).equals(day_roster.get(j).location)){
                     for(int l=i;l<table.size();l++){
                     if()
                     }
                     }
                     }
                     */
                    for (int i = 0; i < table.size(); i++) {//add the name and position in there real office 
                        int b = 0;

                        if (table.get(i).get(1).equals(day_roster.get(j).location)) {
                            //System.out.println(day_roster.get(j).location+"   89999999999");
                            for (int k = 0; k < 50; k++) {
                                //System.out.println(table.get(i+k).get(1)+"    "+table.get(i+k).size()+"    "+days+3);
                                if (table.get(i + k).get(1).equals("ADDITIONAL STAFF") && table.get(i + k).size() < days + 3) {
                                    //System.out.println(table.get(i+k).get(1));
                                    table.get(i + k).add(day_roster.get(j).position);
                                    b = 1;
                                    break;
                                }

                            }
                        }
                        if (b == 1) {
                            break;
                        }
                    }
                } else if (day_roster.get(j).location.equals(staff.get(index).location)) { //add position when there work in there office
                    for (int i = 0; i < table.size(); i++) {
                        if (table.get(i).get(1).equals(name)) {
                            table.get(i).add(day_roster.get(j).position);
                        }
                    }
                } else {//add position when there work in other offices

                    for (int i = 0; i < table.size(); i++) {//add loaction in there office
                        if (table.get(i).get(1).equals(name) && !table.get(i).get(1).isEmpty()) {
                            String location;
                            if (day_roster.get(j).location.equals("ABERFOYLE PARK")) {
                                location = "AP";
                            } else if (day_roster.get(j).location.equals("WILLUNGA")) {
                                location = "WILL";
                            } else if (day_roster.get(j).location.equals("WOODCROFT")) {
                                location = "WCFT";
                            } else {
                                location = "NOAR";
                            }
                            table.get(i).add(location);
                        }
                    }

                    for (int i = 0; i < table.size(); i++) {//add the name and position in there real office 
                        int b = 0;

                        if (table.get(i).get(1).equals(day_roster.get(j).location)) {
                            //System.out.println(day_roster.get(j).location+"   89999999999");
                            for (int k = 0; k < 50; k++) {
                                //System.out.println(table.get(i+k).get(1)+"    "+table.get(i+k).size()+"    "+days+3);
                                if (table.get(i + k).get(1).equals("ADDITIONAL STAFF") && table.get(i + k).size() < days + 3) {
                                    //System.out.println(table.get(i+k).get(1));
                                    table.get(i + k).add(short_name(name) + " " + day_roster.get(j).position);
                                    b = 1;
                                    break;
                                }

                            }
                        }
                        if (b == 1) {
                            break;
                        }
                    }
                }
            }

            for (int j = 0; j < table.size(); j++) {
                if (table.get(j).size() < days + 3 && (!table.get(j).get(1).equals("ABERFOYLE PARK")) && (!table.get(j).get(1).equals("WILLUNGA")) && (!table.get(j).get(1).equals("WOODCROFT")) && (!table.get(j).get(1).equals("NOARLUNGA"))) {
                    table.get(j).add("");
                }
            }

            /*
             for(int j=0;j<staff.size();j++){//check all staff
             String name=staff.get(j).name;
             for(int k=0;k<table.size();k++){//find a staff in the table 
             if(name.equals(table.get(k).get(1))){
             //for(int l=0;l<table.get(l).size();l++){//chech a row in the table
             for(int m=0;m<staff.get(j).workingday.length;m++){//check workingday and find out "off"
             if(staff.get(j).workingday[m].equals("OFF")){
             ArrayList<String> l=(ArrayList<String>)table.get(k).clone();
             //table.get(k).set(3, "OFF");
             l.set(3, "OFF");
             System.out.println(m+"   "+staff.get(j).workingday[m]);
             System.out.println(l+"   "+l.size());
                                    
             }
             }
             //}
             }
             }
             }
             //
             */
        }

        //add days/mth
        for (int j = 0; j < table.size(); j++) {
            if ((table.get(j).get(1).equals("ABERFOYLE PARK")) || (table.get(j).get(1).equals("WILLUNGA")) || (table.get(j).get(1).equals("WOODCROFT")) || (table.get(j).get(1).equals("NOARLUNGA"))) {
                int day = 1, week = 1;
                for (int p = 0; p < 20; p++) {
                    table.get(j).add("Day" + day + " W" + week);
                    day++;
                    if (day > 5) {
                        day = 1;
                        week++;
                    }
                }
                table.get(j).add("days/mth");
            }
        }

        //test
        /*
         for (int i = 0; i < table.size(); i++) {
         for (int j = 0; j < table.get(i).size(); j++) {
         System.out.print(table.get(i).get(j) + "   ");
         }
         System.out.println();
         }
         */
        // System.out.println(table.get(6).get(2));
    }

    String short_name(String name) {
        String s = "";
        if (name.length() > 2) {
            s = name.substring(0, 1);
            for (int i = 1; i < name.length(); i++) {
                if (name.substring(i, i + 1).equals(" ")) {
                    s = s + name.substring(i + 1, i + 2);
                    break;
                }
            }
        }
        return s;
    }

    void creat_roster_table() {
        Connection conn = null;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        String q = "use roster create table roster(id nchar(20) primary key, name nchar(20), day1 nchar(20), day2 nchar(20),day3 nchar(20),day4 nchar(20),day5 nchar(20),day6 nchar(20),day7 nchar(20),day8 nchar(20),day9 nchar(20),day10 nchar(20), day11 nchar(20), day12 nchar(20), day13 nchar(20), day14 nchar(20), day15 nchar(20), day16 nchar(20),day17 nchar(20),day18 nchar(20),day19 nchar(20),day20 nchar(20))";
        try {
            Statement stmt = conn.createStatement();
            PreparedStatement pstmt = null;
            pstmt = conn.prepareCall(q);
            pstmt.executeUpdate();

            stmt.close();
            conn.close();
            System.out.println("deleted ");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    void delete_roster() {
        Connection conn = null;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        String q = "use roster delete from roster";
        try {
            Statement stmt = conn.createStatement();
            PreparedStatement pstmt = null;
            pstmt = conn.prepareCall(q);
            pstmt.executeUpdate();

            stmt.close();
            conn.close();
            //System.out.println("deleted ");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    void load_order() {
        //get orders from database
        String q = "use roster select name from order_ap";
        order_ap = order_from_database(q);
        q = "use roster select name from order_will";
        order_will = order_from_database(q);
        q = "use roster select name from order_wcft";
        order_wcft = order_from_database(q);
        q = "use roster select name from order_noar";
        order_noar = order_from_database(q);

    }

    ArrayList<String> order_from_database(String q) {
        Connection conn = null;
        try {
//        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // DB d=new DB();
        } catch (java.lang.ClassNotFoundException e) {
            e.printStackTrace();
        }
        //System.out.println("ssssss  ");
        try {
            //conn = DriverManager.getConnection("jdbc:odbc:dbpoolname",  "sa", "123456");  
            conn = DriverManager.getConnection("jdbc:sqlserver://testsql:1433;DatabaseName5=roster", "shahua", "4321");
            System.out.println("connected");
        } catch (SQLException e) {
            System.out.println(e);
        }

        ArrayList<String[]> list = new ArrayList<String[]>();
        //String q = "use roster select name from order_ap";
        int j = 0;
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(q);
            while (rs.next()) {
                j++;
                String note[] = new String[1]; // number of colum which you want to get
                for (int i = 0; i < note.length; i++) {
                    note[i] = (String) rs.getObject(i + 1);
                    //System.out.println(note[i] + "   " + i);
                    //System.out.println(i);
                    note[i] = note[i].trim();
                }
                list.add(note);

            }

            stmt.close();
            conn.close();
            //System.out.println(list.get(0)[0] + "   444");
        } catch (Exception e) {
            System.out.println(e);

        }
        ArrayList<String> order = new ArrayList<String>();
        for (int i = 0; i < list.size(); i++) {
            order.add(list.get(i)[0]);
        }
        return order;
    }

    ArrayList<String[]> special = new ArrayList<String[]>(); //special requirement
    individual person; //one staff
    ArrayList<individual> staff = new ArrayList<individual>(); //all staff
    ArrayList<String> all_staff_names = new ArrayList<String>();
    ArrayList<String> all_staff_locations = new ArrayList<String>();

    //the detail of each staff
    String name;
    String location;
    String[] workingday;
    individual_availble baseday;
    individual_availble nonbaseday;
    ArrayList<String> av_locations = new ArrayList<String>();

    ArrayList<ArrayList<String>> av_postion;
    ArrayList<String> position_name = new ArrayList<String>();

    ArrayList<ArrayList<String>> day_positions = new ArrayList<ArrayList<String>>();

    //all position needed
    ArrayList<String> all_positions;
    //all av_staff in the positions 
    //ArrayList<ArrayList<String>> av_staff;
    //all av staff in all FC && CC posstion 
    ArrayList<avaible_position> av_position_fc = new ArrayList<avaible_position>();
    ArrayList<avaible_position> av_position_cc = new ArrayList<avaible_position>();
    ArrayList<avaible_position> av_position_cc_half = new ArrayList<avaible_position>();

    //clone of all av staff in all FC && CC posstion 
    ArrayList<avaible_position> av_position_fc_clone = new ArrayList<avaible_position>();
    ArrayList<avaible_position> av_position_cc_clone = new ArrayList<avaible_position>();
    ArrayList<avaible_position> av_position_cc_half_clone = new ArrayList<avaible_position>();

    //all position which need be orgniased and who will do that (String [2])
    ArrayList<String[]> position_list = new ArrayList<String[]>();

    //only from one day!!!!!!!!!!!
    ArrayList<position_result> day_roster = new ArrayList<position_result>();
    ArrayList<position_result> day_list_fc = new ArrayList<position_result>();
    ArrayList<position_result> day_list_cc = new ArrayList<position_result>();
    ArrayList<ArrayList<position_result>> roster = new ArrayList<ArrayList<position_result>>();

    //clone 
    ArrayList<position_result> day_roster_clone = new ArrayList<position_result>();
    ArrayList<position_result> day_list_fc_clone = new ArrayList<position_result>();
    ArrayList<position_result> day_list_cc_clone = new ArrayList<position_result>();
    ArrayList<ArrayList<position_result>> roster_clone = new ArrayList<ArrayList<position_result>>();

    //all staff need be allocate
    ArrayList<ArrayList<String>> av_basestaff = new ArrayList<ArrayList<String>>();
    ArrayList<ArrayList<String>> av_nonbasestaff = new ArrayList<ArrayList<String>>();

    //the clone of all staff need be allocate avoid fail to allocated
    ArrayList<ArrayList<String>> av_basestaff_clone = new ArrayList<ArrayList<String>>();
    ArrayList<ArrayList<String>> av_nonbasestaff_clone = new ArrayList<ArrayList<String>>();

    //location orgnise
    int amount_of_cc[] = new int[4];// ap 1    will 1  wcft 3 .........
    ArrayList<ArrayList<String>> av_cc_staff = new ArrayList<ArrayList<String>>();
    ArrayList<ArrayList<String>> av_cc_staff_clone = new ArrayList<ArrayList<String>>();
    ArrayList<String> cc_staff;

    ArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();

    //order
    ArrayList<String> order_ap = new ArrayList<String>();
    ArrayList<String> order_will = new ArrayList<String>();
    ArrayList<String> order_wcft = new ArrayList<String>();
    ArrayList<String> order_noar = new ArrayList<String>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.util.List<roster.Name> nameList;
    private javax.persistence.Query nameQuery;
    // End of variables declaration//GEN-END:variables
}
